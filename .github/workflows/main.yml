name: Cloud project

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

jobs:
  testing:
    runs-on: ubuntu-latest

    permissions:
        contents: read
        packages: write
        attestations: write
        id-token: write

    steps:
        # Checks out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

        # Sets up Python using the version we use (3.11)
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

        # Installs required dependencies (in the requirements.txt file)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r api/requirements.txt

        # Runs the tests using pytest
      - name: Pytest
        run: pytest
        working-directory: ./api

        # Connects to the Container registry using the registry and GITHUB_TOKEN
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

        # Extracts metadata (tags, labels) for Docker
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

        # Builds and pushes the Docker image
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

        # Generates artifact attestation
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true